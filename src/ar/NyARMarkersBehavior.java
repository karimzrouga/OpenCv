package ar;// NyARMarkersBehavior.java// Andrew Davison, ad@fivedots.coe.psu.ac.th, July 2013/* A time-based triggered behaviour which uses a detector to   update the position of model drawn above markers.*/import java.awt.image.BufferedImage;import java.io.ByteArrayInputStream;import java.io.InputStream;import java.util.Enumeration;import javax.imageio.ImageIO;import javax.media.j3d.Background;import javax.media.j3d.Behavior;import javax.media.j3d.BoundingSphere;import javax.media.j3d.ImageComponent;import javax.media.j3d.ImageComponent2D;import javax.media.j3d.WakeupCondition;import javax.media.j3d.WakeupOnElapsedTime;import javax.vecmath.Point3d;import org.opencv.core.Mat;import org.opencv.core.MatOfByte;import org.opencv.imgcodecs.Imgcodecs;import org.opencv.videoio.VideoCapture;import jp.nyatla.nyartoolkit.core.NyARException;import jp.nyatla.nyartoolkit.utils.j2se.NyARBufferedImageRaster;public class NyARMarkersBehavior extends Behavior {	/* dimensions of each image; the panel is the same size as the image */	private static final int WIDTH_CAM = 640;	private static final int HEIGHT_CAM = 480;	private static final int CAMERA_ID = 1;	private final double FPS = 30.0;	private VideoCapture grabber;	private NyARBufferedImageRaster raster;	private Mat image;	private ImageComponent2D imc2d;	private DetectMarkers detectMarkers; // the detector for the markers	private Background bg;	private WakeupCondition wakeup;	private boolean cameraStopped = false;	public NyARMarkersBehavior(Background bg, DetectMarkers ms) throws Exception {		super();		this.bg = bg;		detectMarkers = ms;		wakeup = new WakeupOnElapsedTime((int) (1000.0 / FPS));		setSchedulingBounds(new BoundingSphere(new Point3d(), 100.0));		grabber = initGrabber(CAMERA_ID);		Thread.sleep(500);		BufferedImage im = null;		im = picGrab(grabber, CAMERA_ID);		try {			raster = new NyARBufferedImageRaster(im);			imc2d = new ImageComponent2D(ImageComponent2D.FORMAT_RGB, im, true, false);			imc2d.setCapability(ImageComponent.ALLOW_IMAGE_WRITE);		} catch (NyARException e) {			System.out.println(e);			System.exit(1);		}	} // end of NyARMarkersBehavior()	private BufferedImage MattoBufferedImage(Mat image) throws Exception {		MatOfByte bytemat = new MatOfByte();		Imgcodecs.imencode(".jpg", image, bytemat);		byte[] bytes = bytemat.toArray();		InputStream in = new ByteArrayInputStream(bytes);		BufferedImage img = ImageIO.read(in);		return img;	}	private VideoCapture initGrabber(int ID) {		VideoCapture grabber = null;		try {			grabber = new VideoCapture(ID);			//grabber.open(ID);			// grabber.set.setFormat("dshow"); // using DirectShow			//grabber.set(Highgui.CV_CAP_PROP_FRAME_WIDTH, WIDTH_CAM);		//	grabber.set(Highgui.CV_CAP_PROP_FRAME_HEIGHT, HEIGHT_CAM);			if (!grabber.isOpened()) {				System.out.println("Error");			}		} catch (Exception e) {			System.out.println("Could not start grabber");			System.out.println(e);			System.exit(1);		}		return grabber;	} // fin de initGrabber()	private BufferedImage picGrab(VideoCapture grabber, int ID) {		BufferedImage im = null;		image = new Mat();		if (grabber.read(image)) {			try {				im = this.MattoBufferedImage(image);			} catch (Exception e) {				e.printStackTrace();			}		} else			System.out.println("frame perdu");		return im;	} // fin de picGrab()	public void stop() {		try {			cameraStopped = true;			setEnable(false);			// grabber.stop();			grabber.release();		} catch (Exception e) {			System.out.println("Problem stopping grabbing for camera " + CAMERA_ID);		}	}	public void initialize() {		//lancement event		wakeupOn(wakeup);	}	public void processStimulus(Enumeration criteria)	{		if (cameraStopped)			return;		try {			BufferedImage im = (picGrab(grabber, CAMERA_ID));			if (im == null)				System.out.print("frame perdu processStimulus");			else {				raster.wrapImage(im);				if (raster.hasBuffer()) {					if (bg != null) {						imc2d.set(im);						bg.setImage(imc2d);					}					detectMarkers.updateModels(raster);				}				wakeupOn(wakeup);			}		} catch (Exception e) {			e.printStackTrace();		}	} // fin de processStimulus()   /* public void capture()    {    	if(detectMarkers.getMarkerModels().get(0).isVisible==true && detectMarkers.getMarkerModels().get(1).isVisible==true)    	{    		Imgcodecs.imwrite(chemin+"image.jpg",image );    	}    }*/} // fin de la classe NyARMarkersBehavior 